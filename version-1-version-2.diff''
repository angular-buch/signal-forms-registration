diff --git a/tmp/version-1/registration-form.html b/tmp/version-2/registration-form.html
index d56ed71..7aab568 100644
--- a/tmp/version-1/registration-form.html
+++ b/tmp/version-2/registration-form.html
@@ -21,6 +21,30 @@
       <app-form-error [field]="registrationForm.age" />
     </label>
   </div>
+
+  <div>
+    <label
+      >Password
+      <input
+        type="password"
+        autocomplete
+        [control]="registrationForm.password.pw1"
+        [ariaInvalid]="ariaInvalidState(registrationForm.password.pw1())"
+      />
+      <app-form-error [field]="registrationForm.password.pw1" />
+    </label>
+    <label
+      >Password Confirmation
+      <input
+        type="password"
+        autocomplete
+        [control]="registrationForm.password.pw2"
+        [ariaInvalid]="ariaInvalidState(registrationForm.password.pw2())"
+      />
+      <app-form-error [field]="registrationForm.password.pw2" />
+    </label>
+    <app-form-error [field]="registrationForm.password" />
+  </div>
   <fieldset>
     <legend>
       E-Mail Addresses
@@ -48,6 +72,18 @@
     >Subscribe to Newsletter?
     <input type="checkbox" [control]="registrationForm.newsletter" />
   </label>
+
+  <label>
+    Topics (multiple possible):
+    <select [disabled]="registrationForm.newsletterTopics().disabled()" [control]="registrationForm.newsletterTopics">
+      <option value=""></option>
+      <option value="Angular">Angular</option>
+      <option value="Vue">Vue</option>
+      <option value="React">React</option>
+    </select>
+    <app-form-error [field]="registrationForm.newsletterTopics" />
+  </label>
+
   <label
     >I agree to the terms and conditions
     <input
diff --git a/tmp/version-1/registration-form.html'' b/tmp/version-2/registration-form.html''
index d7ff67f..3f9e51e 100644
--- a/tmp/version-1/registration-form.html''
+++ b/tmp/version-2/registration-form.html''
@@ -1,5 +1,10 @@
 <app-back-button />
-<h1>Version 1: Getting Started with the Basics</h1>
+<h1>Version 2: Advanced Validation and Schema Patterns</h1>
+
+<p>
+  <mark>Note:</mark> User "johndoe" already exists. Use this user to simulate async validation
+  error.
+</p>
 
 <form (submit)="submitForm($event)" novalidate>
   <label
@@ -24,6 +29,30 @@
       <app-form-error [field]="registrationForm.age" />
     </label>
   </div>
+
+  <div>
+    <label
+      >Password
+      <input
+        type="password"
+        autocomplete
+        [control]="registrationForm.password.pw1"
+        [ariaInvalid]="ariaInvalidState(registrationForm.password.pw1())"
+      />
+      <app-form-error [field]="registrationForm.password.pw1" />
+    </label>
+    <label
+      >Password Confirmation
+      <input
+        type="password"
+        autocomplete
+        [control]="registrationForm.password.pw2"
+        [ariaInvalid]="ariaInvalidState(registrationForm.password.pw2())"
+      />
+      <app-form-error [field]="registrationForm.password.pw2" />
+    </label>
+    <app-form-error [field]="registrationForm.password" />
+  </div>
   <fieldset>
     <legend>
       E-Mail Addresses
@@ -51,6 +80,18 @@
     >Subscribe to Newsletter?
     <input type="checkbox" [control]="registrationForm.newsletter" />
   </label>
+
+  <label>
+    Topics (multiple possible):
+    <select [disabled]="registrationForm.newsletterTopics().disabled()" [control]="registrationForm.newsletterTopics">
+      <option value=""></option>
+      <option value="Angular">Angular</option>
+      <option value="Vue">Vue</option>
+      <option value="React">React</option>
+    </select>
+    <app-form-error [field]="registrationForm.newsletterTopics" />
+  </label>
+
   <label
     >I agree to the terms and conditions
     <input
diff --git a/tmp/version-1/registration-form.ts b/tmp/version-2/registration-form.ts
index 398a80f..a60ead9 100644
--- a/tmp/version-1/registration-form.ts
+++ b/tmp/version-2/registration-form.ts
@@ -1,5 +1,5 @@
-import { Component, inject, signal } from '@angular/core';
-import { Control, FieldState, form, maxLength, min, minLength, pattern, required, schema, submit } from '@angular/forms/signals';
+import { Component, inject, resource, signal } from '@angular/core';
+import { applyEach, applyWhen, Control, customError, CustomValidationError, disabled, email, FieldState, form, maxLength, min, minLength, pattern, required, schema, submit, validate, validateAsync, validateTree, ValidationError, WithField } from '@angular/forms/signals';
 
 import { FormError } from '../form-error/form-error';
 import { RegistrationService } from '../registration-service';
@@ -8,31 +8,117 @@ import { DebugOutput } from '../debug-output/debug-output';
 export interface RegisterFormData {
   username: string;
   age: number;
+  password: { pw1: string; pw2: string };
   email: string[];
   newsletter: boolean;
+  newsletterTopics: string;
   agreeToTermsAndConditions: boolean;
 }
 
 export const formSchema = schema<RegisterFormData>((fieldPath) => {
-  // Username validation
+  // username is required and must be between 3 and 12 characters long
   required(fieldPath.username, { message: 'Username is required' });
-  minLength(fieldPath.username, 3, { message: 'A username must be at least 3 characters long' });
-  maxLength(fieldPath.username, 12, { message: 'A username can be max. 12 characters long' });
+  minLength(fieldPath.username, 3, {
+    message: 'A username must be at least 3 characters long',
+  });
+  maxLength(fieldPath.username, 12, {
+    message: 'A username can be max. 12 characters long',
+  });
+  validateAsync(fieldPath.username, {
+    // Reactive params
+    params: (ctx) => ctx.value(),
+    // Factory creating a resource
+    factory: (params) => {
+      const registrationService = inject(RegistrationService);
+      return resource({
+        params,
+        loader: async ({ params }) => {
+          return await registrationService.checkUserExists(params);
+        },
+      });
+    },
+    // Maps resource to error
+    errors: (result) => {
+      return result
+        ? customError({
+            kind: 'userExists',
+            message: 'The username you entered was already taken',
+          })
+        : undefined;
+    },
+  });
 
-  // Age validation
-  min(fieldPath.age, 18, { message: 'You must be >=18 years old.' });
+  // validate number input
+  min(fieldPath.age, 18, { message: 'You must be >=18 years old' });
 
-  // Terms and conditions
+  // at least one email and each email must match format
+  validate(fieldPath.email, (ctx) =>
+    !ctx.value().some((e) => e)
+      ? customError({
+          kind: 'atLeastOneEmail',
+          message: 'At least one E-Mail address must be added',
+        })
+      : undefined
+  );
+  applyEach(fieldPath.email, (emailPath) => {
+    email(emailPath, { message: 'E-Mail format is invalid' });
+  });
+
+  // passwords are required and must match
+  required(fieldPath.password.pw1, { message: 'A password is required' });
+  required(fieldPath.password.pw2, {
+    message: 'A password confirmation is required',
+  });
+  minLength(fieldPath.password.pw1, 8, {
+    message: 'A password must be at least 8 characters long',
+  });
+  pattern(
+    fieldPath.password.pw1,
+    new RegExp('^.*[!@#$%^&*(),.?":{}|<>\\[\\]\\\\/~`_+=;\'\\-].*$'),
+    { message: 'The passwort must contain at least one special character' }
+  );
+  validateTree(fieldPath.password, (ctx) => {
+    return ctx.value().pw2 === ctx.value().pw1
+      ? undefined
+      : customError({
+          field: ctx.fieldOf(fieldPath.password.pw2), // assign the error to the second password field
+          kind: 'confirmationPassword',
+          message: 'The entered password must match with the one specified in "Password" field',
+        });
+  });
+
+  // checkbox must be activated
   required(fieldPath.agreeToTermsAndConditions, {
-    message: 'You must agree to the terms and conditions.',
+    message: 'You must agree to the terms and conditions',
   });
+
+  // apply conditionally: only when subscribe to newsletter, rules apply and at least one topic must be selected
+  applyWhen(
+    fieldPath,
+    (ctx) => ctx.value().newsletter,
+    (fieldPathWhenTrue) => {
+      validate(fieldPathWhenTrue.newsletterTopics, (ctx) =>
+        !ctx.value().length
+          ? customError({
+              kind: 'noTopicSelected',
+              message: 'Select at least one newsletter topic',
+            })
+          : undefined
+      );
+    }
+  );
+
+  // disable topics selection when checkbox for subscription was not activated
+  disabled(fieldPath.newsletterTopics, (ctx) => !ctx.valueOf(fieldPath.newsletter));
 });
 
 const initialState: RegisterFormData = {
   username: '',
   age: 18,
+  password: { pw1: '', pw2: '' },
   email: [''],
   newsletter: false,
+  newsletterTopics: '',
   agreeToTermsAndConditions: false,
 };
 
@@ -65,13 +151,30 @@ export class RegistrationForm {
   protected async submitForm(e: Event) {
     e.preventDefault();
 
+    // validate when submitting and assign possible errors for matching field for showing in the UI
     await submit(this.registrationForm, async (form) => {
-      await this.#registrationService.registerUser(form().value);
-      console.log('Registration successful!');
-      this.resetForm();
+      const errors: WithField<CustomValidationError | ValidationError>[] = [];
+
+      try {
+        await this.#registrationService.registerUser(form().value);
+      } catch (e) {
+        errors.push(
+          customError({
+            field: form,
+            error: {
+              kind: 'serverError',
+              message: 'There was an server error, please try again (should work after 3rd try)',
+            },
+          })
+        );
+      }
+
+      setTimeout(() => this.resetForm(), 3000);
+      return errors;
     });
   }
 
+  // Reset form
   protected resetForm() {
     this.registrationModel.set(initialState);
     this.registrationForm().reset();
diff --git a/tmp/version-1/registration-form.ts'' b/tmp/version-2/registration-form.ts''
index 9e60713..92976ed 100644
--- a/tmp/version-1/registration-form.ts''
+++ b/tmp/version-2/registration-form.ts''
@@ -1,5 +1,5 @@
-import { Component, inject, signal } from '@angular/core';
-import { Control, FieldState, form, maxLength, min, minLength, pattern, required, schema, submit } from '@angular/forms/signals';
+import { Component, inject, resource, signal } from '@angular/core';
+import { applyEach, applyWhen, Control, customError, CustomValidationError, disabled, email, FieldState, form, maxLength, min, minLength, pattern, required, schema, submit, validate, validateAsync, validateTree, ValidationError, WithField } from '@angular/forms/signals';
 
 import { FormError } from '../form-error/form-error';
 import { RegistrationService } from '../registration-service';
@@ -8,41 +8,127 @@ import { DebugOutput } from '../debug-output/debug-output';
 export interface RegisterFormData {
   username: string;
   age: number;
+  password: { pw1: string; pw2: string };
   email: string[];
   newsletter: boolean;
+  newsletterTopics: string;
   agreeToTermsAndConditions: boolean;
 }
 
 export const formSchema = schema<RegisterFormData>((fieldPath) => {
-  // Username validation
+  // username is required and must be between 3 and 12 characters long
   required(fieldPath.username, { message: 'Username is required' });
-  minLength(fieldPath.username, 3, { message: 'A username must be at least 3 characters long' });
-  maxLength(fieldPath.username, 12, { message: 'A username can be max. 12 characters long' });
+  minLength(fieldPath.username, 3, {
+    message: 'A username must be at least 3 characters long',
+  });
+  maxLength(fieldPath.username, 12, {
+    message: 'A username can be max. 12 characters long',
+  });
+  validateAsync(fieldPath.username, {
+    // Reactive params
+    params: (ctx) => ctx.value(),
+    // Factory creating a resource
+    factory: (params) => {
+      const registrationService = inject(RegistrationService);
+      return resource({
+        params,
+        loader: async ({ params }) => {
+          return await registrationService.checkUserExists(params);
+        },
+      });
+    },
+    // Maps resource to error
+    errors: (result) => {
+      return result
+        ? customError({
+            kind: 'userExists',
+            message: 'The username you entered was already taken',
+          })
+        : undefined;
+    },
+  });
 
-  // Age validation
-  min(fieldPath.age, 18, { message: 'You must be >=18 years old.' });
+  // validate number input
+  min(fieldPath.age, 18, { message: 'You must be >=18 years old' });
 
-  // Terms and conditions
+  // at least one email and each email must match format
+  validate(fieldPath.email, (ctx) =>
+    !ctx.value().some((e) => e)
+      ? customError({
+          kind: 'atLeastOneEmail',
+          message: 'At least one E-Mail address must be added',
+        })
+      : undefined
+  );
+  applyEach(fieldPath.email, (emailPath) => {
+    email(emailPath, { message: 'E-Mail format is invalid' });
+  });
+
+  // passwords are required and must match
+  required(fieldPath.password.pw1, { message: 'A password is required' });
+  required(fieldPath.password.pw2, {
+    message: 'A password confirmation is required',
+  });
+  minLength(fieldPath.password.pw1, 8, {
+    message: 'A password must be at least 8 characters long',
+  });
+  pattern(
+    fieldPath.password.pw1,
+    new RegExp('^.*[!@#$%^&*(),.?":{}|<>\\[\\]\\\\/~`_+=;\'\\-].*$'),
+    { message: 'The passwort must contain at least one special character' }
+  );
+  validateTree(fieldPath.password, (ctx) => {
+    return ctx.value().pw2 === ctx.value().pw1
+      ? undefined
+      : customError({
+          field: ctx.fieldOf(fieldPath.password.pw2), // assign the error to the second password field
+          kind: 'confirmationPassword',
+          message: 'The entered password must match with the one specified in "Password" field',
+        });
+  });
+
+  // checkbox must be activated
   required(fieldPath.agreeToTermsAndConditions, {
-    message: 'You must agree to the terms and conditions.',
+    message: 'You must agree to the terms and conditions',
   });
+
+  // apply conditionally: only when subscribe to newsletter, rules apply and at least one topic must be selected
+  applyWhen(
+    fieldPath,
+    (ctx) => ctx.value().newsletter,
+    (fieldPathWhenTrue) => {
+      validate(fieldPathWhenTrue.newsletterTopics, (ctx) =>
+        !ctx.value().length
+          ? customError({
+              kind: 'noTopicSelected',
+              message: 'Select at least one newsletter topic',
+            })
+          : undefined
+      );
+    }
+  );
+
+  // disable topics selection when checkbox for subscription was not activated
+  disabled(fieldPath.newsletterTopics, (ctx) => !ctx.valueOf(fieldPath.newsletter));
 });
 
 const initialState: RegisterFormData = {
   username: '',
   age: 18,
+  password: { pw1: '', pw2: '' },
   email: [''],
   newsletter: false,
+  newsletterTopics: '',
   agreeToTermsAndConditions: false,
 };
 
 @Component({
-  selector: 'app-registration-form-1',
+  selector: 'app-registration-form-2',
   imports: [Control, DebugOutput, FormError],
-  templateUrl: './registration-form-1.html',
-  styleUrl: './registration-form-1.scss',
+  templateUrl: './registration-form-2.html',
+  styleUrl: './registration-form-2.scss',
 })
-export class RegistrationForm1 {
+export class RegistrationForm2 {
   readonly #registrationService = inject(RegistrationService);
   protected readonly registrationModel = signal<RegisterFormData>(initialState);
 
@@ -65,13 +151,30 @@ export class RegistrationForm1 {
   protected async submitForm(e: Event) {
     e.preventDefault();
 
+    // validate when submitting and assign possible errors for matching field for showing in the UI
     await submit(this.registrationForm, async (form) => {
-      await this.#registrationService.registerUser(form().value);
-      console.log('Registration successful!');
-      this.resetForm();
+      const errors: WithField<CustomValidationError | ValidationError>[] = [];
+
+      try {
+        await this.#registrationService.registerUser(form().value);
+      } catch (e) {
+        errors.push(
+          customError({
+            field: form,
+            error: {
+              kind: 'serverError',
+              message: 'There was an server error, please try again (should work after 3rd try)',
+            },
+          })
+        );
+      }
+
+      setTimeout(() => this.resetForm(), 3000);
+      return errors;
     });
   }
 
+  // Reset form
   protected resetForm() {
     this.registrationModel.set(initialState);
     this.registrationForm().reset();
