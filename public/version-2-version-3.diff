diff --git a/tmp/version-2/registration-form.html b/tmp/version-3/registration-form.html
index 7aab568..de9eba2 100644
--- a/tmp/version-2/registration-form.html
+++ b/tmp/version-3/registration-form.html
@@ -9,6 +9,9 @@
     <app-form-error [field]="registrationForm.username" />
   </label>
 
+  <!-- A whole child form with own model -->
+  <app-identity-form [identity]="registrationForm.identity" />
+
   <!-- native HTML inputs bound with the [control] directive -->
   <div>
     <label
@@ -72,18 +75,11 @@
     >Subscribe to Newsletter?
     <input type="checkbox" [control]="registrationForm.newsletter" />
   </label>
-
-  <label>
-    Topics (multiple possible):
-    <select [disabled]="registrationForm.newsletterTopics().disabled()" [control]="registrationForm.newsletterTopics">
-      <option value=""></option>
-      <option value="Angular">Angular</option>
-      <option value="Vue">Vue</option>
-      <option value="React">React</option>
-    </select>
-    <app-form-error [field]="registrationForm.newsletterTopics" />
-  </label>
-
+  <app-multiselect
+    [control]="registrationForm.newsletterTopics"
+    label="Topics (multiple possible):"
+  />
+  <app-form-error [field]="registrationForm.newsletterTopics" />
   <label
     >I agree to the terms and conditions
     <input
diff --git a/tmp/version-2/registration-form.ts b/tmp/version-3/registration-form.ts
index a60ead9..b934992 100644
--- a/tmp/version-2/registration-form.ts
+++ b/tmp/version-3/registration-form.ts
@@ -1,17 +1,20 @@
 import { Component, inject, resource, signal } from '@angular/core';
-import { applyEach, applyWhen, Control, customError, CustomValidationError, disabled, email, FieldState, form, maxLength, min, minLength, pattern, required, schema, submit, validate, validateAsync, validateTree, ValidationError, WithField } from '@angular/forms/signals';
+import { apply, applyEach, applyWhen, Control, customError, CustomValidationError, disabled, email, FieldState, form, maxLength, min, minLength, pattern, required, schema, submit, validate, validateAsync, validateTree, ValidationError, WithField } from '@angular/forms/signals';
 
 import { FormError } from '../form-error/form-error';
+import { GenderIdentity, IdentityForm, identitySchema } from '../identity-form/identity-form';
+import { Multiselect } from '../multiselect/multiselect';
 import { RegistrationService } from '../registration-service';
 import { DebugOutput } from '../debug-output/debug-output';
 
 export interface RegisterFormData {
   username: string;
+  identity: GenderIdentity;
   age: number;
   password: { pw1: string; pw2: string };
   email: string[];
   newsletter: boolean;
-  newsletterTopics: string;
+  newsletterTopics: string[];
   agreeToTermsAndConditions: boolean;
 }
 
@@ -48,6 +51,9 @@ export const formSchema = schema<RegisterFormData>((fieldPath) => {
     },
   });
 
+  // apply child schema for identity checks
+  apply(fieldPath.identity, identitySchema);
+
   // validate number input
   min(fieldPath.age, 18, { message: 'You must be >=18 years old' });
 
@@ -114,17 +120,22 @@ export const formSchema = schema<RegisterFormData>((fieldPath) => {
 
 const initialState: RegisterFormData = {
   username: '',
+  identity: {
+    gender: '',
+    salutation: '',
+    pronoun: '',
+  },
   age: 18,
   password: { pw1: '', pw2: '' },
   email: [''],
   newsletter: false,
-  newsletterTopics: '',
+  newsletterTopics: ['Angular'],
   agreeToTermsAndConditions: false,
 };
 
 @Component({
   selector: 'app-registration-form',
-  imports: [Control, DebugOutput, FormError],
+  imports: [Control, DebugOutput, FormError, IdentityForm, Multiselect],
   templateUrl: './registration-form.html',
   styleUrl: './registration-form.scss',
 })
